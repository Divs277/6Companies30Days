class Solution {
public:
       bool isHighAccess(const vector<int>& times) {
        int n = times.size();
        for (int i = 2; i < n; i++) {
            int current = times[i];
            int prevprev = times[i - 2];
            if (prevprev + 99 >= current) {
                return true;
            }
        }
        return false;
    }

    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        vector<string> ans;
        int N = access_times.size();
        sort(access_times.begin(),access_times.end());
        map<string, vector<int>> mymap;

        
        for (int i = 0; i < N; i++) {
            string name = access_times[i][0];
            int time = stoi(access_times[i][1]);
            mymap[name].push_back(time);
        }

        for (auto it = mymap.begin(); it != mymap.end(); it++) {
            string key = it->first;
            vector<int> vec = it->second;

            if (mymap[key].size() < 3) {
                continue;
            } else if (isHighAccess(vec)) {
                ans.push_back(key);
            }
        }
        return ans;
    }
};
